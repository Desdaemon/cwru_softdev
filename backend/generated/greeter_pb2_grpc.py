# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import greeter_pb2 as greeter__pb2


class UsersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/Users/register',
                request_serializer=greeter__pb2.RegisterRequest.SerializeToString,
                response_deserializer=greeter__pb2.User.FromString,
                )
        self.login = channel.unary_unary(
                '/Users/login',
                request_serializer=greeter__pb2.LoginRequest.SerializeToString,
                response_deserializer=greeter__pb2.User.FromString,
                )


class UsersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=greeter__pb2.RegisterRequest.FromString,
                    response_serializer=greeter__pb2.User.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=greeter__pb2.LoginRequest.FromString,
                    response_serializer=greeter__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Users(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Users/register',
            greeter__pb2.RegisterRequest.SerializeToString,
            greeter__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Users/login',
            greeter__pb2.LoginRequest.SerializeToString,
            greeter__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TripsStub(object):
    """define an interface to implement
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.tripsOf = channel.unary_unary(
                '/Trips/tripsOf',
                request_serializer=greeter__pb2.TripsOfRequest.SerializeToString,
                response_deserializer=greeter__pb2.TripsOfResponse.FromString,
                )
        self.addTrip = channel.unary_unary(
                '/Trips/addTrip',
                request_serializer=greeter__pb2.AddTripRequest.SerializeToString,
                response_deserializer=greeter__pb2.Result.FromString,
                )
        self.deleteTrip = channel.unary_unary(
                '/Trips/deleteTrip',
                request_serializer=greeter__pb2.DeleteTripRequest.SerializeToString,
                response_deserializer=greeter__pb2.Result.FromString,
                )
        self.addPhotoToDestination = channel.unary_unary(
                '/Trips/addPhotoToDestination',
                request_serializer=greeter__pb2.AddDestPhotoRequest.SerializeToString,
                response_deserializer=greeter__pb2.Result.FromString,
                )
        self.photosOf = channel.unary_stream(
                '/Trips/photosOf',
                request_serializer=greeter__pb2.PhotosOfRequest.SerializeToString,
                response_deserializer=greeter__pb2.PhotosOfResponse.FromString,
                )


class TripsServicer(object):
    """define an interface to implement
    """

    def tripsOf(self, request, context):
        """each method takes one parameter message and returns one response message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTrip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTrip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addPhotoToDestination(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def photosOf(self, request, context):
        """this method returns a stream of messages
        in both Dart and Python, this can be achieved via generators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TripsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'tripsOf': grpc.unary_unary_rpc_method_handler(
                    servicer.tripsOf,
                    request_deserializer=greeter__pb2.TripsOfRequest.FromString,
                    response_serializer=greeter__pb2.TripsOfResponse.SerializeToString,
            ),
            'addTrip': grpc.unary_unary_rpc_method_handler(
                    servicer.addTrip,
                    request_deserializer=greeter__pb2.AddTripRequest.FromString,
                    response_serializer=greeter__pb2.Result.SerializeToString,
            ),
            'deleteTrip': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTrip,
                    request_deserializer=greeter__pb2.DeleteTripRequest.FromString,
                    response_serializer=greeter__pb2.Result.SerializeToString,
            ),
            'addPhotoToDestination': grpc.unary_unary_rpc_method_handler(
                    servicer.addPhotoToDestination,
                    request_deserializer=greeter__pb2.AddDestPhotoRequest.FromString,
                    response_serializer=greeter__pb2.Result.SerializeToString,
            ),
            'photosOf': grpc.unary_stream_rpc_method_handler(
                    servicer.photosOf,
                    request_deserializer=greeter__pb2.PhotosOfRequest.FromString,
                    response_serializer=greeter__pb2.PhotosOfResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Trips', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trips(object):
    """define an interface to implement
    """

    @staticmethod
    def tripsOf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Trips/tripsOf',
            greeter__pb2.TripsOfRequest.SerializeToString,
            greeter__pb2.TripsOfResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Trips/addTrip',
            greeter__pb2.AddTripRequest.SerializeToString,
            greeter__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTrip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Trips/deleteTrip',
            greeter__pb2.DeleteTripRequest.SerializeToString,
            greeter__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addPhotoToDestination(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Trips/addPhotoToDestination',
            greeter__pb2.AddDestPhotoRequest.SerializeToString,
            greeter__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def photosOf(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Trips/photosOf',
            greeter__pb2.PhotosOfRequest.SerializeToString,
            greeter__pb2.PhotosOfResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
