"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import greeter_pb2
import grpc
import typing

class UsersStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    register: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.RegisterRequest,
        greeter_pb2.User]

    login: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.LoginRequest,
        greeter_pb2.User]


class UsersServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def register(self,
        request: greeter_pb2.RegisterRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.User: ...

    @abc.abstractmethod
    def login(self,
        request: greeter_pb2.LoginRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.User: ...


def add_UsersServicer_to_server(servicer: UsersServicer, server: grpc.Server) -> None: ...

class TripsStub:
    """define an interface to implement"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    tripsOf: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.TripsOfRequest,
        greeter_pb2.TripsOfResponse]
    """each method takes one parameter message and returns one response message"""

    addTrip: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.AddTripRequest,
        greeter_pb2.Result]

    deleteTrip: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.DeleteTripRequest,
        greeter_pb2.Result]

    addPhotoToDestination: grpc.UnaryUnaryMultiCallable[
        greeter_pb2.AddDestPhotoRequest,
        greeter_pb2.Result]

    photosOf: grpc.UnaryStreamMultiCallable[
        greeter_pb2.PhotosOfRequest,
        greeter_pb2.PhotosOfResponse]
    """this method returns a stream of messages
    in both Dart and Python, this can be achieved via generators
    """


class TripsServicer(metaclass=abc.ABCMeta):
    """define an interface to implement"""
    @abc.abstractmethod
    def tripsOf(self,
        request: greeter_pb2.TripsOfRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.TripsOfResponse:
        """each method takes one parameter message and returns one response message"""
        pass

    @abc.abstractmethod
    def addTrip(self,
        request: greeter_pb2.AddTripRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.Result: ...

    @abc.abstractmethod
    def deleteTrip(self,
        request: greeter_pb2.DeleteTripRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.Result: ...

    @abc.abstractmethod
    def addPhotoToDestination(self,
        request: greeter_pb2.AddDestPhotoRequest,
        context: grpc.ServicerContext,
    ) -> greeter_pb2.Result: ...

    @abc.abstractmethod
    def photosOf(self,
        request: greeter_pb2.PhotosOfRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[greeter_pb2.PhotosOfResponse]:
        """this method returns a stream of messages
        in both Dart and Python, this can be achieved via generators
        """
        pass


def add_TripsServicer_to_server(servicer: TripsServicer, server: grpc.Server) -> None: ...
