syntax = "proto3";

// Learn more about this file's syntax:
// https://developers.google.com/protocol-buffers/docs/proto3

import "google/protobuf/timestamp.proto";

message Result {
  repeated string errors = 1;
}

message Coords {
  double lat = 1;
  double lon = 2;
}

message Destination {
  Coords coords = 1;
  google.protobuf.Timestamp visit_time = 3;
  string description = 4;
}

message User {
  uint32 user_id = 1;
  string username = 2;
  string email = 3;
}

message Trip {
  uint32 trip_id = 1;
  uint32 user_id = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
  repeated Destination stops = 99;
}

message Photo {
  uint32 photo_id = 1;
  string name = 2;
  string extension = 3;
  google.protobuf.Timestamp date_taken = 4;
  string url = 5;
}

service Users {
  rpc Register (RegisterRequest) returns (UserResponse);
  rpc Login (LoginRequest) returns (UserResponse);
}

message UserResponse {
  oneof result {
    User user = 1;
    string error = 2;
  }
}


// define an interface to implement
service Trips {
  // each method takes one parameter message and returns one response message
  rpc TripsOf (TripsOfRequest) returns (TripsOfResponse);
  rpc AddTrip (AddTripRequest) returns (Result);
  rpc DeleteTrip (DeleteTripRequest) returns (Result);
  rpc AddPhotoToDestination (AddDestPhotoRequest) returns (Result);
  // this method returns a stream of messages
  // in both Dart and Python, this can be achieved via generators
  rpc PhotosOf (PhotosOfRequest) returns (stream PhotosOfResponse);
}

message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message LoginRequest {
  string identity = 1; // either username or email
  string password = 2;
}

message AddTripRequest {
  uint32 user_id = 1;
  repeated Trip trips = 2;
}

message DeleteTripRequest {
  uint32 user_id = 1;
  uint32 trip_id = 2;
}

message AddDestPhotoRequest {
  Coords coords = 1;
  repeated Photo photos = 99;
}

message TripsOfRequest {
  uint32 user_id = 1;
}

message TripsOfResponse {
  repeated Trip trips = 99;
}

message PhotosOfRequest {
  uint32 user_id = 1;
  uint32 trip_id = 2;
}

message PhotosOfResponse {
  Photo photo = 1;
}

// vim:expandtab:sw=2:ts=2
