syntax = "proto3";

// Learn more about this file's syntax:
// https://developers.google.com/protocol-buffers/docs/proto3

message Coord {
  double lat = 1;
  double long = 2;
}

message Result {
  // nested messsage
  message Error {
    // repeated denotes an array
    repeated string errors = 1;
  }
  // a union of two or more possible values
  oneof result {
    bool success = 1;
    Error reason = 2;
  }
}

message User {
  uint32 user_id = 1;
  string username = 2;
  string email = 3;
}

message Trip {
  uint32 trip_id = 1;
  uint32 user_id = 2;
  repeated Coord stops = 99;
}

message Photo {
  uint32 photo_id = 1;
  string name = 2;
  string extension = 3;
  string url = 99;
}

service Users {
  rpc register (RegisterRequest) returns (User) {}
  rpc login (LoginRequest) returns (User) {}
}

// define an interface to implement
service Trips {
  // each method takes one parameter message and returns one response message
  rpc tripsOf (TripsOfRequest) returns (TripsOfResponse) {}
  rpc addTrip (AddTripRequest) returns (Result) {}
  rpc deleteTrip (DeleteTripRequest) returns (Result) {}
  rpc addPhoto (AddPhotoRequest) returns (Result) {}
  // this method returns a stream of messages
  // in both Dart and Python, this can be achieved via generators
  rpc photosOf (PhotosOfRequest) returns (stream PhotosOfResponse) {}
}

message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message LoginRequest {
  string identity = 1; // either username or email
  string password = 2;
}

message AddTripRequest {
  uint32 user_id = 1;
  repeated Coord stops = 99;
}

message DeleteTripRequest {
  uint32 user_id = 1;
  uint32 trip_id = 2;
}

message AddPhotoRequest {
  uint32 user_id = 1;
  string name = 2;
  string extension = 3;
  oneof source {
    bytes data = 99;
    string url = 100;
  }
}

message TripsOfRequest {
  uint32 user_id = 1;
}

message TripsOfResponse {
  repeated Trip trips = 99;
}

message PhotosOfRequest {
  uint32 user_id = 1;
  uint32 trip_id = 2;
}

message PhotosOfResponse {
  Photo photo = 1;
}

// vim:expandtab:sw=2:ts=2
